#!/usr/bin/env python3
"""
LaTeX to Unicode Converter
Usage: ./jtexu "x^2+y"
"""

import re
import subprocess
import sys

# Install required packages if not present
try:
    import pyperclip
    from sympy import Symbol, sympify
    from sympy.parsing.latex import parse_latex
except ImportError:
    print("Installing required packages...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "sympy", "pyperclip"])
    import pyperclip
    from sympy import Symbol, sympify
    from sympy.parsing.latex import parse_latex

# Additional Unicode mappings not handled by sympy
EXTRA_LATEX_MAPPINGS = {
    r'\alpha': 'α', r'\beta': 'β', r'\gamma': 'γ', r'\delta': 'δ',
    r'\epsilon': 'ε', r'\varepsilon': 'ε', r'\zeta': 'ζ', r'\eta': 'η',
    r'\theta': 'θ', r'\vartheta': 'ϑ', r'\iota': 'ι', r'\kappa': 'κ',
    r'\lambda': 'λ', r'\mu': 'μ', r'\nu': 'ν', r'\xi': 'ξ',
    r'\pi': 'π', r'\varpi': 'ϖ', r'\rho': 'ρ', r'\varrho': 'ϱ',
    r'\sigma': 'σ', r'\varsigma': 'ς', r'\tau': 'τ', r'\upsilon': 'υ',
    r'\phi': 'φ', r'\varphi': 'ϕ', r'\chi': 'χ', r'\psi': 'ψ',
    r'\omega': 'ω', r'\Gamma': 'Γ', r'\Delta': 'Δ', r'\Theta': 'Θ',
    r'\Lambda': 'Λ', r'\Xi': 'Ξ', r'\Pi': 'Π', r'\Sigma': 'Σ',
    r'\Upsilon': 'Υ', r'\Phi': 'Φ', r'\Psi': 'Ψ', r'\Omega': 'Ω',
    r'\infty': '∞', r'\propto': '∝', r'\partial': '∂', r'\exists': '∃',
    r'\nexists': '∄', r'\emptyset': '∅', r'\nabla': '∇', r'\in': '∈',
    r'\notin': '∉', r'\ni': '∋', r'\prod': '∏', r'\sum': '∑',
    r'\surd': '√', r'\sqrt': '√', r'\mp': '∓', r'\pm': '±',
    r'\dotplus': '∔', r'\setminus': '∖', r'\circ': '∘', r'\bullet': '∙',
    r'\sqrt': '√', r'\sim': '∼', r'\approx': '≈', r'\neq': '≠',
    r'\ne': '≠', r'\leq': '≤', r'\le': '≤', r'\geq': '≥',
    r'\ge': '≥', r'\ll': '≪', r'\gg': '≫', r'\subset': '⊂',
    r'\supset': '⊃', r'\cup': '∪', r'\cap': '∩', r'\wedge': '∧',
    r'\vee': '∨', r'\oplus': '⊕', r'\otimes': '⊗', r'\perp': '⊥',
    r'\parallel': '∥', r'\leftarrow': '←', r'\rightarrow': '→',
    r'\Leftarrow': '⇐', r'\Rightarrow': '⇒', r'\leftrightarrow': '↔',
    r'\Leftrightarrow': '⇔', r'\mapsto': '↦', r'\forall': '∀',
    r'\cdot': '·', r'\to': '→', r'\times': '×', r'\div': '÷',
    r'\therefore': '∴', r'\because': '∵', r'\ldots': '…', r'\cdots': '⋯',
    r'\vdots': '⋮', r'\ddots': '⋱', r'\aleph': 'ℵ', r'\ell': 'ℓ',
    r'\Re': 'ℜ', r'\Im': 'ℑ', r'\wp': '℘', r'\bot': '⊥', r'\iff': '⇔',
    r'\implies': '⇒', r'\subseteq': '⊆', r'\int': '∫', r'\xor': '⊕',
    # Fractions
    r'\frac{1}{2}': '½', r'\frac{1}{3}': '⅓', r'\frac{2}{3}': '⅔',
    r'\frac{1}{4}': '¼', r'\frac{3}{4}': '¾', r'\frac{1}{5}': '⅕',
    r'\frac{2}{5}': '⅖', r'\frac{3}{5}': '⅗', r'\frac{4}{5}': '⅘',
    r'\frac{1}{6}': '⅙', r'\frac{5}{6}': '⅚', r'\frac{1}{8}': '⅛',
    r'\frac{3}{8}': '⅜', r'\frac{5}{8}': '⅝', r'\frac{7}{8}': '⅞',
}

# Character mappings for superscripts and subscripts
SUPERSCRIPT_MAP = {
    '0': '⁰', '1': '¹', '2': '²', '3': '³', '4': '⁴', '5': '⁵', 
    '6': '⁶', '7': '⁷', '8': '⁸', '9': '⁹', '+': '⁺', '-': '⁻', 
    '=': '⁼', '(': '⁽', ')': '⁾', 'n': 'ⁿ', 'i': 'ⁱ',
    'a': 'ᵃ', 'b': 'ᵇ', 'c': 'ᶜ', 'd': 'ᵈ', 'e': 'ᵉ', 'f': 'ᶠ',
    'g': 'ᵍ', 'h': 'ʰ', 'j': 'ʲ', 'k': 'ᵏ', 'l': 'ˡ', 'm': 'ᵐ',
    'o': 'ᵒ', 'p': 'ᵖ', 'r': 'ʳ', 's': 'ˢ', 't': 'ᵗ', 'u': 'ᵘ',
    'v': 'ᵛ', 'w': 'ʷ', 'x': 'ˣ', 'y': 'ʸ', 'z': 'ᶻ'
}

SUBSCRIPT_MAP = {
    '0': '₀', '1': '₁', '2': '₂', '3': '₃', '4': '₄', '5': '₅',
    '6': '₆', '7': '₇', '8': '₈', '9': '₉', '+': '₊', '-': '₋',
    '=': '₌', '(': '₍', ')': '₎', 'a': 'ₐ', 'e': 'ₑ', 'h': 'ₕ',
    'i': 'ᵢ', 'j': 'ⱼ', 'k': 'ₖ', 'l': 'ₗ', 'm': 'ₘ', 'n': 'ₙ',
    'o': 'ₒ', 'p': 'ₚ', 'r': 'ᵣ', 's': 'ₛ', 't': 'ₜ', 'u': 'ᵤ',
    'v': 'ᵥ', 'x': 'ₓ', 'y': 'ᵧ',
}

# Map for brackets and parentheses
BRACKETS = {
    r'\{': '{', r'\}': '}', r'\left(': '(', r'\right)': ')',
    r'\left[': '[', r'\right]': ']', r'\left\{': '{', r'\right\}': '}',
    r'\langle': '⟨', r'\rangle': '⟩', r'\left|': '|', r'\right|': '|',
    r'\|': '‖', r'\lVert': '‖', r'\rVert': '‖'
}

# Map for accents
ACCENTS = {
    'hat': '̂', 'acute': '́', 'grave': '̀', 'tilde': '̃',
    'bar': '̄', 'vec': '⃗', 'dot': '̇', 'ddot': '̈'
}

def map_chars_to_unicode(content, char_map):
    """Convert characters to their Unicode representations using a character map."""
    result = ""
    for c in content:
        if c in char_map:
            result += char_map[c]
        else:
            result += c
    return result

def process_superscripts_subscripts(latex):
    """Process superscripts and subscripts handling both simple and bracketed forms."""
    # Handle direct superscripts like x^2
    pattern = r'(.)(\^)([a-zA-Z0-9+\-])'
    def direct_sup_replace(match):
        base, caret, exp = match.groups()
        if exp in SUPERSCRIPT_MAP:
            return base + SUPERSCRIPT_MAP[exp]
        return base + exp  # Fallback if no mapping exists
    
    latex = re.sub(pattern, direct_sup_replace, latex)
    
    # Handle bracketed superscripts like x^{abc}
    sup_pattern = r'\^{([^{}]+)}'
    def sup_replace(match):
        content = match.group(1)
        return map_chars_to_unicode(content, SUPERSCRIPT_MAP)
    
    latex = re.sub(sup_pattern, sup_replace, latex)
    
    # Handle direct subscripts like x_2
    pattern = r'(.)(\_)([a-zA-Z0-9+\-])'
    def direct_sub_replace(match):
        base, underscore, sub = match.groups()
        if sub in SUBSCRIPT_MAP:
            return base + SUBSCRIPT_MAP[sub]
        return base + sub  # Fallback if no mapping exists
    
    latex = re.sub(pattern, direct_sub_replace, latex)
    
    # Handle bracketed subscripts like x_{abc}
    sub_pattern = r'_{([^{}]+)}'
    def sub_replace(match):
        content = match.group(1)
        return map_chars_to_unicode(content, SUBSCRIPT_MAP)
    
    latex = re.sub(sub_pattern, sub_replace, latex)
    
    return latex

def process_nested_brackets(latex):
    """Handle cases with nested brackets in subscripts and superscripts."""
    # This is a more complex case requiring recursive processing
    # First, find all instances of ^{...} and _{...} with potentially nested brackets
    
    def process_bracketed_content(latex, pattern, map_function):
        """Process bracketed content with potential nesting."""
        def replace_func(match):
            content = match.group(1)
            # Count opening and closing braces to ensure we have the correct content
            open_count = content.count('{')
            close_count = content.count('}')
            
            # If balanced, process the content
            if open_count == close_count:
                return map_function(content)
            
            # If not balanced, this is a nested structure or partial match
            # In this case, we should be more cautious
            return match.group(0)  # Return the original text
            
        return re.sub(pattern, replace_func, latex)
    
    # Process superscripts
    latex = process_bracketed_content(latex, r'\^{([^{}]*(?:{[^{}]*}[^{}]*)*)}', 
                                    lambda content: map_chars_to_unicode(content, SUPERSCRIPT_MAP))
    
    # Process subscripts
    latex = process_bracketed_content(latex, r'_{([^{}]*(?:{[^{}]*}[^{}]*)*)}', 
                                   lambda content: map_chars_to_unicode(content, SUBSCRIPT_MAP))
    
    return latex

def process_fractions(latex):
    """Process fraction expressions that aren't in our mapping."""
    pattern = r'\\frac{([^{}]+)}{([^{}]+)}'
    
    def repl(match):
        num, denom = match.groups()
        # Check if we have a simple fraction that can be represented by a Unicode character
        fraction_key = r'\frac{' + num + '}{' + denom + '}'
        if fraction_key in EXTRA_LATEX_MAPPINGS:
            return EXTRA_LATEX_MAPPINGS[fraction_key]
        # Otherwise, try to format it using Unicode divisions
        return f"{num}⁄{denom}"
    
    return re.sub(pattern, repl, latex)

def process_accents(latex):
    """Process accents that modify preceding characters."""
    for accent, unicode_accent in ACCENTS.items():
        # Fixed pattern to avoid escape sequence issues
        pattern = r'\\' + accent + r'([a-zA-Z])'
        latex = re.sub(pattern, r'\1' + unicode_accent, latex)
        
        pattern = r'\\' + accent + r'{([^}]+)}'
        latex = re.sub(pattern, r'\1' + unicode_accent, latex)
    
    return latex

def latex_to_unicode(latex):
    """Convert LaTeX expression to Unicode representation."""
    result = latex
    
    # First attempt: try to use sympy's parser for mathematical expressions
    try:
        from io import StringIO
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        
        expr = parse_latex(latex)
        unicode_result = str(expr)
        
        sys.stdout = old_stdout
        
        if unicode_result and unicode_result != latex:
            return unicode_result
    except Exception:
        sys.stdout = sys.__stdout__
        # If sympy parsing fails, continue with direct replacements
        pass
    
    # Pre-process certain LaTeX constructs
    result = process_fractions(result)
    
    # Apply direct replacements from our mapping
    for latex_cmd, unicode_char in sorted(EXTRA_LATEX_MAPPINGS.items(), key=lambda x: len(x[0]), reverse=True):
        result = result.replace(latex_cmd, unicode_char)
    
    # Process brackets
    for latex_bracket, unicode_bracket in BRACKETS.items():
        result = result.replace(latex_bracket, unicode_bracket)
    
    # Process superscripts and subscripts (both direct and bracketed)
    result = process_superscripts_subscripts(result)
    
    # Handle nested brackets in superscripts and subscripts
    result = process_nested_brackets(result)
    
    # Process accents
    result = process_accents(result)
    
    # Clean up remaining LaTeX commands and braces
    result = re.sub(r'\\[a-zA-Z]+', '', result)  # Remove remaining commands
    result = result.replace('{', '').replace('}', '')  # Remove braces
    
    return result

def copy_to_clipboard(text):
    """Copy text to clipboard using pyperclip or xclip as fallback."""
    try:
        # Fallback to xclip if pyperclip fails
        process = subprocess.Popen(['xclip', '-selection', 'clipboard'], 
                                  stdin=subprocess.PIPE)
        process.communicate(input=text.encode('utf-8'))
    except Exception:
        print("Warning: Could not copy to clipboard. Please install xclip or fix pyperclip.")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} \"LaTeX expression\"")
        sys.exit(1)
    
    latex = sys.argv[1]
    result = latex_to_unicode(latex)
    print(result)
    copy_to_clipboard(result)
